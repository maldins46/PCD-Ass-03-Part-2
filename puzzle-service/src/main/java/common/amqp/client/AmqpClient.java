package common.amqp.client;

import common.amqp.callback.Callback;

/**
 * Interface used to represent common functions of the AMQP client wrapper,
 * used to communicate to the broker. Possible actions varies based on
 * client type (puzzle service or player)
 */
interface AmqpClient {

    /**
     * Starts the connections, and declares the queue used as mailbox
     * by the client. This must be the first method called on the client.
     */
    void connect();


    /**
     * Add a callback to the client, that will be executed when a messsage
     * of the correspondent type is received. This method can be called more
     * times, but only after calling the connect() method, and before listen().
     * @param callback The callback.
     */
    void addCallback(Callback callback);


    /**
     * Binds queue to exchanges if needed, and starts to consuming in the
     * client personal queue, considering all callbacks added. This method
     * must be called after connect() and all addCallback() invocations.
     */
    void listen();


    /**
     * It closes the connection gracefully. This method must be called when
     * connection is correctly up.
     */
    void disconnect();


    /**
     * Checks whether connection is correctly up.
     * @return True if the connection is correctly up, false otherwise.
     */
    boolean isConnected();


    /**
     * Checks whether the client is consuming/listening in the personal queue.
     * @return True if it is listening, false otherwise.
     */
    boolean isListening();


    /**
     * Gives the String used to name the client personal queue. It could be a
     * String auto-generated by the broker, or a known queue name, in the
     * puzzle service case.
     * @return The queue name, as a String.
     */
    String getPersonalQueueName();
}
